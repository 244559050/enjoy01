1. Canvas
2. Paint
3. drawText文字绘制
4. canvas对绘制的辅助clipXXX()和Matrix
5. 绘制顺序问题
6. 属性动画
7. 硬件加速
8. view坐标系和布局测量
9. 事件传递和触摸反馈
10. 约束布局实战
11. ViewGroup分析(常见的几大布局)
12. 自定义ViewGroup


为什么要自定义View
1. Android系统内置View无法实现我们的需求
2. 处于性能考虑


自定义ViewGroup: 则只需要重写onMeasure()和onLayout()


onMeasure：
1. 确定自身的大小
2. 确定子view的大小

尺寸： 200dp, match_parent, wrap_content

流程：
1. ViewGroup开始测量自己的尺寸
2. 为每个子View计算测量的限制信息
3. 把上一步确定的限制信息，传递给每一个子View，然后子View开始measure
自己的尺寸
4. 获取子View测量完成后的尺寸
5. ViewGroup根据自身的情况，计算自己的尺寸
6. 保存自身的尺寸

onLayout
1. 根据规则确定子view位置

流程：
1. 遍历子View for
2. 确定自己的规则
3. 子View的测量尺寸
4. left,top,right,bottom
6. child.layout


layoutParams
width
height

width
getWidth
getHeight
public final int getWidth() {
        return mRight - mLeft;
    }
getMeasureWidth
getMeasureHeight
public final int getMeasuredWidth() {
        return mMeasuredWidth & MEASURED_SIZE_MASK;
    }
getSuggestedMinimumWidth
getSuggestedMinimumHeight
protected int getSuggestedMinimumWidth() {
        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());
    }

Drawable

getIntrinsicWidth
getIntrinsicHeight

getMinimumWidth
getMinimumHeight


流式布局：把子控件从左到右的排放，如果一行放不下，那么自动换行


自定义布局流程：
1. 自定义属性：声明，设置，解析获取自定义值
在attr.xml 声明：
<?xml version="1.0" encoding="utf-8"?>

<resources>
	<declare-styleable name="FlowLayout">
		<attr name="android:gravity" />
		<attr name="horizonSpacing" format="dimension|reference"/>
	</declare-styleable>
	<declare-styleable name="FlowLayout_Layout">
		<attr name="android:layout_gravity" />
	</declare-styleable>
</resources>
2. 自定义属性： 引入命名空间
xmlns:app="http://schemas.android.com/apk/res-auto"
3. 解析：
 TypedArray a = c.obtainStyledAttributes(attrs,R.styleable.FlowLayout_Layout);
            try{
               gravity = a.getInt(R.styleable.FlowLayout_Layout_android_layout_gravity,-1); 
            }finally {
                a.recycle();
            }



2. 测量：在onMeasure MeasureSpec.AT_MOST/EXACTlY 
 自身的宽高/child的宽高
 FlowLayout 本身 宽 AT_MOST(FlowLayout父层给的限制)  layout_width:wrap_content: 给默认值，宽度最大的
 
 AT_MOST: 所有的行数的累加的高度
 
 子View： layout_height wrap_content child layout_height match_parent: 这一行里面高度最大的
 
 
3. 布局：在onLayout方法里面根据自己规则来确定children的位置



4. 绘制：onDraw
5. 处理LayoutParams 
6. 触摸反馈：滑动事件

动画
视图动画
	补间动画 (平移，缩放，旋转，透明度) popupwidow 转场 show/hide layoutAnimation
	逐帧动画  开机 app启动
	
	interpolator 缓动函数
	y = f(t)
	
	

属性动画

触摸反馈动画

转场动画 共享元素

视图状态状态动画

矢量图动画

约束布局ConStraintSet

揭露动画

spring 动画

lottie-android  


















































































