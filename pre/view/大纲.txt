1. Canvas
2. Paint
3. drawText文字绘制
4. canvas对绘制的辅助clipXXX()和Matrix
5. 绘制顺序问题
6. 属性动画
7. 硬件加速
8. view坐标系和布局测量
9. 事件传递和触摸反馈
10. 约束布局实战
11. ViewGroup分析(常见的几大布局)
12. 自定义ViewGroup


为什么要自定义View
1. Android系统内置View无法实现我们的需求
2. 处于性能考虑


自定义ViewGroup: 则只需要重写onMeasure()和onLayout()


onMeasure：
1. 确定自身的大小
2. 确定子view的大小

尺寸： 200dp, match_parent, wrap_content

流程：
1. ViewGroup开始测量自己的尺寸
2. 为每个子View计算测量的限制信息
3. 把上一步确定的限制信息，传递给每一个子View，然后子View开始measure
自己的尺寸
4. 获取子View测量完成后的尺寸
5. ViewGroup根据自身的情况，计算自己的尺寸
6. 保存自身的尺寸

onLayout
1. 根据规则确定子view位置

流程：
1. 遍历子View for
2. 确定自己的规则
3. 子View的测量尺寸
4. left,top,right,bottom
6. child.layout


layoutParams
width
height

width
getWidth
getHeight
public final int getWidth() {
        return mRight - mLeft;
    }
getMeasureWidth
getMeasureHeight
public final int getMeasuredWidth() {
        return mMeasuredWidth & MEASURED_SIZE_MASK;
    }
getSuggestedMinimumWidth
getSuggestedMinimumHeight
protected int getSuggestedMinimumWidth() {
        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());
    }

Drawable

getIntrinsicWidth
getIntrinsicHeight

getMinimumWidth
getMinimumHeight
















































































