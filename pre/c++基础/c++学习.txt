一、操作系统方面多线程相关与线程之间同步技术熟练使用（但不局限于）以下linux APIlinux下的线程创建、等待、获取线程id1 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
2 int pthread_join(pthread_t thread, void **retval);
3 pthread_t pthread_self(void);
常见线程之间的同步技术（何时该用那种技术）互斥体1 int pthread_mutex_init(pthread_mutex_t* mutex, const pthread_mutexattr_t* mutexattr);
2 int pthread_mutex_destroy(pthread_mutex_t* mutex);
3 int pthread_mutex_lock(pthread_mutex_t *mutex);
4 int pthread_mutex_trylock(pthread_mutex_t* mutex);
5 int pthread_mutex_unlock(pthread_mutex_t* mutex);
信号量1 int sem_init(sem_t* sem,int pshared,unsigned int value);
2 int sem_destroy(sem_t* sem);
3 int sem_wait(sem_t* sem);
4 int sem_post(sem_t* sem);
5 int sem_getvalue(sem_t* sem, int* valp);
条件变量1 int pthread_cond_init(pthread_cond_t* restrict cond,const pthread_condattr_t* restrict attr);
2 int pthread_cond_destroy(pthread_cond_t* cond);
3 int pthread_cond_signal(pthread_cond_t* cond);
4 int pthread_cond_broadcast(pthread_cond_t* cond);
5 int pthread_cond_wait(pthread_cond_t* restrictcond, pthread_mutex_t* restrictmutex);
6 int pthread_cond_timedwait(pthread_cond_t* restrictcond,pthread_mutex_t* restrict mutex, const struct timespec *restrict abstime);
读写/自旋锁1 int pthread_rwlock_init(pthread_rwlock_t* restrict rwlock, const pthread_rwlockattr_t* restrict attr);
2 int pthread_rwlock_destroy(pthread_rwlock_t* rwlock);
3 int pthread_rwlock_rdlock(pthread_rwlock_t* rwlock);
4 int pthread_rwlock_tryrdlock(pthread_rwlock_t* rwlock);
5 int pthread_rwlock_wrlock(pthread_rwlock_t* rwlock);
6 int pthread_rwlock_trywrlock(pthread_rwlock_t* rwlock);
7 int pthread_rwlock_unlock(pthread_rwlock_t* rwlock);
//以下这两个函数在Linux和Mac的man文档里都没有，新版的pthread.h里面也没有，旧版的能找到
8 int pthread_rwlock_timedrdlock_np(pthread_rwlock_t* rwlock, conststruct timespec *deltatime);
9 int pthread_rwlock_timedwrlock_np(pthread_rwlock_t* rwlock, const struct timespec * deltatime);
10 int pthread_spin_init(__pthread_spinlock_t* __lock, int__pshared);
11 int pthread_spin_destroy(__pthread_spinlock_t* __lock);
12 int pthread_spin_trylock(__pthread_spinlock_t* __lock);
13 int pthread_spin_unlock(__pthread_spinlock_t* __lock);
14 int pthread_spin_lock(__pthread_spinlock_t* __lock);
熟悉守护进程的创建、原理了解计划作业crontab熟悉进程、线程状态查看命令（top、strace、pstack）熟悉内存状态查看命令memstat、free熟悉IO状态查看命令iostat、df、du了解linux文件的权限、用户、时间（ctime、mtime、atime）、inode等文件基本属性，熟练使用chmod、chown、chgrp等基本命令。熟悉文件传输命令scp、rz、sz命令、熟悉文件定位命令find、whereis命令。熟悉软链接，熟悉ln命令。熟悉lsof命令。二、网络熟悉tcp状态机（三次握手、四次挥手）。熟悉tcpdump命令。熟悉网络状态和防火墙状态查看命令：netstat、ifconfig、iptables熟悉socket API，包括但不限于（connect、accept、bind、listen、send/sendto、recv/recvfrom、select、gethostbyname）1 int connect(int sockfd,const struct sockaddr *addr, socklen_t addrlen);
2 int accept(int sockfd, struct sockaddr *addr, socklen_t* addrlen);
3 int bind(int socket,const struct sockaddr *address, socklen_t address_len);
4 int listen(int sockfd, int backlog);
5 ssize_t send(int sockfd, const void* buf, size_t len, int flags);
6 ssize_t sendto(int sockfd, const void* buf, size_t len,int flags, const struct sockaddr *dest_addr, socklen_t addrlen);
7 ssize_t recv(int sockfd, void* buf,size_t len,int flags);
8 ssize_t recvfrom(int sockfd, void* buf, size_t len,int flags, struct sockaddr *src_addr, socklen_t* addrlen);
9 int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
11 void FD_CLR(int fd, fd_set *set);
12 int FD_ISSET(int fd, fd_set *set);
13 voidFD_SET(int d, fd_set *set);
14 void FD_ZERO(fd_set *set);
15 struct hostent *gethostbyname(const char* name);
熟悉epoll，熟悉水平触发与边缘触发。1 int epoll_create(int size);
2 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
3 int epoll_wait(int epfd, struct epoll_event  *events, int maxevents, int timeout);
熟悉阻塞socket和非阻塞socket在connect、send、recv等行为上的区别，如何将socket设置为非阻塞的。三、脚本工具了解shell基本语法、变量操作、函数、循环/条件判断等程序结构。熟练使用文本编辑工具vi/vim。了解使用文本处理命令grep、sed、cut。了解awk命令。四、数据库熟悉数据表结构设计（三范式、字段属性）。了解查询优化（索引的概念与创建、sql优化）。熟悉常见的mysql API函数：1 mysql_real_connect
2 mysql_select_db
3 mysql_query
4 mysql_store_result
5 mysql_free_result
6 mysql_num_rows
7 mysql_close
8 mysql_errno
五、编程语言C/C++方面熟悉内存分布（堆、栈、静态/全局/局部变量、虚指针…）熟悉Makefile。熟悉gdb调试（断点、查看内存、执行跟踪、了解CPU主要寄存器作用…）。熟悉性能分析工具(gprof)。熟悉C-Runtime常用函数（如字符串格式化函数printf、scanf，字符串比较连接函数、内存分配函数、文件与目录操作函数等）。熟悉stl库。熟悉OO思想、常见设计模式（如单例模式、工厂设计模式、装饰者模式、Builder模式、生产者消费者模式、策略模式等）。熟悉RAII、pimpl惯用法。有一定的代码质量和重构能力。